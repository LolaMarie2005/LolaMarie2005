import java.util.Random;
import java.util.Scanner;

public class SnakeGame {

    // Constants
    public static final int GRID_SIZE_X = 20; // Number of columns
    public static final int GRID_SIZE_Y = 10; // Number of rows
    public static final char SNAKE_CHAR = 'S';
    public static final char FOOD_CHAR = '@';
    public static final char EMPTY_CHAR = '.';
    public static final char WALL_CHAR = '#';
    public static final char OBSTACLE_CHAR = '%'; // Obstacle character
    public static final char EMPTY_GAP = ' '; // Empty gap in walls for wrap-around
    public static final int MAX_SNAKE_LENGTH = 100;
    public static final int MAX_GROW_LENGTH = 2;
    public static final int MAX_OBSTACLES = 6; // Maximum number of obstacles
    public static final int NUM_FOODS = 3; // Food required to generate new obstacle

    // Game state
    public static char[][] grid;
    public static int[][] snake;
    public static int snakeLength;
    public static boolean isGameOver = false;
    public static int foodX;
    public static int foodY;
    public static int foodEatenCount = 0; // Counter for food eaten
    public static int numObstacles = 1; // Start with 1 obstacle

    /**
     * Initializes the grid, creates the wall with gaps, snake, food, and obstacles.
     */
    public static void initializeGame() {
        grid = new char[GRID_SIZE_Y][GRID_SIZE_X];
        // creates a 2D array called grid where Y is defined by rows and X by columns
        // Each element of the grid is a char that represents the state of each position on the board
        snake = new int[MAX_SNAKE_LENGTH][2];
        //creates a 2D array called snake
        // max length is in rows and 2 is in columns because it has to be less than 2
        snakeLength = 1;
        //Snake start at 1

        // Create the grid with walls and gaps
        for (int i = 0; i < GRID_SIZE_Y; i++) {
            //start of a nested loop that iterates through each row, represented by i
            for (int j = 0; j < GRID_SIZE_X; j++) {
                //this is the inner loop for the columns, represented by j
                if (i == 0 || i == GRID_SIZE_Y - 1) { // Top and bottom walls
                    //checks if current cell is at a top row or a bottom row
                    //Decides if it should place the wall at top or bottom
                    if (j == GRID_SIZE_X / 2) {
                        //checks if the current column is in the centre of the grid
                        grid[i][j] = EMPTY_GAP; // creates a gap in top/bottom walls
                    } else {
                        grid[i][j] = WALL_CHAR;// if not at centre on top or bottom then places wall char
                    }
                } else if (j == 0 || j == GRID_SIZE_X - 1) { // Left and right walls
                    //checks if current cell is at the left or right column
                    if (i == GRID_SIZE_Y / 2) {
                        grid[i][j] = EMPTY_GAP; // Gap in left/right walls
                        // checks for if they are halfway down the column the place an empty gap
                    } else {
                        grid[i][j] = WALL_CHAR;
                        //if not then place a wall char
                    }
                } else {
                    grid[i][j] = EMPTY_CHAR; // if not then it fills with empty spaces
                }
            }
        }

        // Initialize the snake
        snake[0][0] = GRID_SIZE_Y / 2; // Snake head starting Y
        snake[0][1] = GRID_SIZE_X / 2; // Snake head starting X
        // the two lines place the snake head at the exact centre of the grib when initialized

        // Draw the snake
        for (int i = 0; i < snakeLength; i++) {
            int x = snake[i][0];//x coordinate of the snake
            int y = snake[i][1];// y coordinate of the snake
            grid[x][y] = SNAKE_CHAR;
        }

        // Place food and one initial obstacle
        placeObstacles(numObstacles);
        generateFood();
    }
    /**
     * Randomly places the given number of obstacles on the grid, ensuring they do not overlap with the snake or food.
     */
    public static void placeObstacles(int numObstacles) {
        Random rand = new Random();
        int placed = 0;
        while (placed < numObstacles) {
            int x = rand.nextInt(GRID_SIZE_Y - 2) + 1;
            int y = rand.nextInt(GRID_SIZE_X - 2) + 1;
            if (grid[x][y] == EMPTY_CHAR && (x != snake[0][0] || y != snake[0][1])) {
                grid[x][y] = OBSTACLE_CHAR;
                placed++;
                numObstacles--;
            }
        }
    }
    public static void moveSnake(char direction) {
        int newX = snake[0][0];
        int newY = snake[0][1];
        //represent current head of the snake (X and Y coordinates)


        switch (direction) {
            case 'w': newX--; break; // Move up
            case 's': newX++; break; // Move down
            case 'a': newY--; break; // Move left
            case 'd': newY++; break; // Move right
            case 'q': isGameOver = true; break;//Quit Game
            default: return; // Invalid input, ignore and return
        }
        // Implement wrap-around movement only through gaps
        if (newX == 0 && newY == GRID_SIZE_X / 2) { // Top gap
            newX = GRID_SIZE_Y - 2; // Wrap from top to bottom
        } else if (newX == GRID_SIZE_Y - 1 && newY == GRID_SIZE_X / 2) { // Bottom gap
            newX = 1; // Wrap from bottom to top
        } else if (newY == 0 && newX == GRID_SIZE_Y / 2) { // Left gap
            newY = GRID_SIZE_X - 2; // Wrap from left to right
        } else if (newY == GRID_SIZE_X - 1 && newX == GRID_SIZE_Y / 2) { // Right gap
            newY = 1; // Wrap from right to left
        }

        // Check if the snake hits a non-gap wall or an obstacle
        if (!isValidMove(newX, newY)) {
            isGameOver = true;
            System.out.println("Game Over! You hit the wall, an obstacle or yourself.");
            return;
        }
        boolean hasEaten=(newX==foodX && newY==foodY);
        if (hasEaten){
            foodEatenCount++;
            // Add a new obstacle after every 3 food items, up to 5 obstacles
            if (foodEatenCount % NUM_FOODS==0 && numObstacles <=MAX_OBSTACLES) {
                numObstacles++;
                placeObstacles(numObstacles); // Place a new obstacle
            }
            generateFood();
        }
        updateSnakePosition(newX, newY, hasEaten);
    }

    public static boolean isValidMove(int x, int y) {
        // Check if the move is within the grid boundaries
        if (grid[x][y] == OBSTACLE_CHAR || grid[x][y] == WALL_CHAR) {
            return false; // Collision with an obstacle or wall (non-gap)
        }
        // Check if the snake collides with itself
        for (int i = 0; i < snakeLength; i++) {
            if (snake[i][0] == x && snake[i][1] == y) {
                return false; // Collision with itself
            }
        }
        return true;
    }
    /**
     * Updates the snake's position on the grid and adjusts the snake's body coordinates.
     */
    public static void updateSnakePosition(int newX, int newY, boolean hasEaten) {
        // If the snake is less than 3 segments long, grow with each move
        if (snakeLength <= MAX_GROW_LENGTH) {
            snakeLength++;
        } else if (hasEaten) {
            snakeLength++; // Grow if food is eaten
        }

        // Store the tail's previous position
        int tailX = snake[snakeLength - 1][0];
        int tailY = snake[snakeLength - 1][1];

        // Shift the snake body (move each segment to the position of the previous one)
        for (int i = snakeLength - 1; i > 0; i--) {
            snake[i][0] = snake[i - 1][0];
            snake[i][1] = snake[i - 1][1];
        }

        // Update the head's position
        snake[0][0] = newX;
        snake[0][1] = newY;

        // Add the snake back to the grid
        for (int i = 0; i < snakeLength; i++) {
            grid[snake[i][0]][snake[i][1]] = SNAKE_CHAR;
        }

        // Clear the tail's previous position on the grid if the snake didn't grow
        if (!hasEaten) {
            if (grid[tailX][tailY] != WALL_CHAR && grid[tailX][tailY] != OBSTACLE_CHAR ) {
                grid[tailX][tailY] = EMPTY_CHAR;
            }
        }
    }

    public static void generateFood() {
        Random rand = new Random();
        // a random object is created to generate a random grid position
        do {
            foodX = rand.nextInt(GRID_SIZE_Y - 2) + 1;
            //generates a random integer for food x between 1 and grid size y-2
            foodY = rand.nextInt(GRID_SIZE_X - 2) + 1;
            // generates a random integer for food x between 1 and grid size y-2
            //These +1 offsets and the -2 ensure that the food is placed within the inner grid, avoiding the edges where walls are located.
            // The walls are usually at index 0 and GRID_SIZE_X - 1 or GRID_SIZE_Y - 1.
        } while (grid[foodX][foodY] != EMPTY_CHAR);
        // Ensure the position is empty
        //The do-while loop ensures that the function keeps generating new random positions
        // until it finds an empty space (EMPTY_CHAR) on the grid where no snake segment, obstacle, or wall is present.
        grid[foodX][foodY] = FOOD_CHAR;
    }

    /**
     * Displays the current state of the game grid to the console.
     */
    public static void displayGrid() {
        // Print the grid
        for (int i = 0; i < GRID_SIZE_Y; i++) {
            for (int j = 0; j < GRID_SIZE_X; j++) {
                System.out.print(grid[i][j]);
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        initializeGame();

        while (!isGameOver) {
            displayGrid();
            System.out.print("Enter your move (w/a/s/d) or q to quit: ");
            char direction = scanner.next().charAt(0);
            moveSnake(direction);
        }

        System.out.println("Game Over!");
        scanner.close();
    }
}
